(ns hoplon.svg
  (:refer-clojure :exclude [symbol filter mask set use])
  (:require [hoplon.core :refer [mk-elem! ensure-kids! do! mk!]]))

(defmethod mk! :svg
  [elem _]
  (let [xmlns "http://www.w3.org/2000/svg"]
    (fn [& args]
      (-> js/document (.createElementNS xmlns elem) ensure-kids! (apply args)))))

(defmethod do! :xlink/*
  [elem kw val]
  (let [xlink "http://www.w3.org/1999/xlink"]
    (.setAttributeNS elem xlink (name kw) val)))

(def a                   (mk-elem! "a" :svg))
(def altGlyph            (mk-elem! "altGlyph" :svg))
(def altGlyphDef         (mk-elem! "altGlyphDef" :svg))
(def altGlyphItem        (mk-elem! "altGlyphItem" :svg))
(def animate             (mk-elem! "animate" :svg))
(def animateColor        (mk-elem! "animateColor" :svg))
(def animateMotion       (mk-elem! "animateMotion" :svg))
(def animateTransform    (mk-elem! "animateTransform" :svg))
(def circle              (mk-elem! "circle" :svg))
(def clipPath            (mk-elem! "clipPath" :svg))
(def color-profile       (mk-elem! "color-profile" :svg))
(def cursor              (mk-elem! "cursor" :svg))
(def defs                (mk-elem! "defs" :svg))
(def desc                (mk-elem! "desc" :svg))
(def ellipse             (mk-elem! "ellipse" :svg))
(def feBlend             (mk-elem! "feBlend" :svg))
(def feColorMatrix       (mk-elem! "feColorMatrix" :svg))
(def feComponentTransfer (mk-elem! "feComponentTransfer" :svg))
(def feComposite         (mk-elem! "feComposite" :svg))
(def feConvolveMatrix    (mk-elem! "feConvolveMatrix" :svg))
(def feDiffuseLighting   (mk-elem! "feDiffuseLighting" :svg))
(def feDisplacementMap   (mk-elem! "feDisplacementMap" :svg))
(def feDistantLight      (mk-elem! "feDistantLight" :svg))
(def feFlood             (mk-elem! "feFlood" :svg))
(def feFuncA             (mk-elem! "feFuncA" :svg))
(def feFuncB             (mk-elem! "feFuncB" :svg))
(def feFuncG             (mk-elem! "feFuncG" :svg))
(def feFuncR             (mk-elem! "feFuncR" :svg))
(def feGaussianBlur      (mk-elem! "feGaussianBlur" :svg))
(def feImage             (mk-elem! "feImage" :svg))
(def feMerge             (mk-elem! "feMerge" :svg))
(def feMergeNode         (mk-elem! "feMergeNode" :svg))
(def feMorphology        (mk-elem! "feMorphology" :svg))
(def feOffset            (mk-elem! "feOffset" :svg))
(def fePointLight        (mk-elem! "fePointLight" :svg))
(def feSpecularLighting  (mk-elem! "feSpecularLighting" :svg))
(def feSpotLight         (mk-elem! "feSpotLight" :svg))
(def feTile              (mk-elem! "feTile" :svg))
(def feTurbulence        (mk-elem! "feTurbulence" :svg))
(def filter              (mk-elem! "filter" :svg))
(def font                (mk-elem! "font" :svg))
(def font-face           (mk-elem! "font-face" :svg))
(def font-face-format    (mk-elem! "font-face-format" :svg))
(def font-face-name      (mk-elem! "font-face-name" :svg))
(def font-face-src       (mk-elem! "font-face-src" :svg))
(def font-face-uri       (mk-elem! "font-face-uri" :svg))
(def foreignObject       (mk-elem! "foreignObject" :svg))
(def g                   (mk-elem! "g" :svg))
(def glyph               (mk-elem! "glyph" :svg))
(def glyphRef            (mk-elem! "glyphRef" :svg))
(def hkern               (mk-elem! "hkern" :svg))
(def image               (mk-elem! "image" :svg))
(def line                (mk-elem! "line" :svg))
(def linearGradient      (mk-elem! "linearGradient" :svg))
(def marker              (mk-elem! "marker" :svg))
(def mask                (mk-elem! "mask" :svg))
(def metadata            (mk-elem! "metadata" :svg))
(def missing-glyph       (mk-elem! "missing-glyph" :svg))
(def mpath               (mk-elem! "mpath" :svg))
(def path                (mk-elem! "path" :svg))
(def pattern             (mk-elem! "pattern" :svg))
(def polygon             (mk-elem! "polygon" :svg))
(def polyline            (mk-elem! "polyline" :svg))
(def radialGradient      (mk-elem! "radialGradient" :svg))
(def rect                (mk-elem! "rect" :svg))
(def script              (mk-elem! "script" :svg))
(def set                 (mk-elem! "set" :svg))
(def stop                (mk-elem! "stop" :svg))
(def style               (mk-elem! "style" :svg))
(def svg                 (mk-elem! "svg" :svg))
(def switch              (mk-elem! "switch" :svg))
(def symbol              (mk-elem! "symbol" :svg))
(def text                (mk-elem! "text" :svg))
(def textPath            (mk-elem! "textPath" :svg))
(def title               (mk-elem! "title" :svg))
(def tref                (mk-elem! "tref" :svg))
(def tspan               (mk-elem! "tspan" :svg))
(def use                 (mk-elem! "use" :svg))
(def view                (mk-elem! "view" :svg))
(def vkern               (mk-elem! "vkern" :svg))
